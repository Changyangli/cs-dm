    method seqVarsIn(e: pExp) returns (result: seq<pVar>)
    {
        /* Compute the set of variables the convert to sequence
           Dafny does not allow expressions in return statements
           so we compute and store the results of the expression
           first, and then return
        */

        result := setVarsToSeq(getVars(e));
        return /* result */;
    }

    /*
    Given a set of propositional variables, convert it into a 
    sequence in some arbitrary order by calling a recursive 
    helper function with an initially empty sequence. This is 
    a second example of the design pattern seen above.

    Note that Dafny requires the *decreases* statement in the
    loop specification, to help it know how to prove that the
    loop terminates. The statement tells Dafny that it is the
    set, s', that "gets smaller until ulimately bottoming out"
    at the empty set. 
    */
    method setVarsToSeq(s: set<pVar>) returns (result: seq<pVar>)
    {
        var l: seq<pVar> := [];
        var s' := s;
        while (s' != {}) 
            decreases s';
        {
            var v :| v in s';
            l := [ v ] + l;
            s' := s' - { v };
        }
        return l;
    }

/*
    Given a pExp, we will often need to extract from it
    the set of variables it uses. This method does that.
    Note that even if a variable appears multiple times 
    in an expression it will of course only appear in the
    set once.
    */
    function method getVars(e: pExp): set<pVar>
    {
      /*
      Do the work by calling a recursive helper 
      function with an empty set as the starting 
      set to which the variables in the expression
      will be added.
      */
      getVarsHelper(e, {})
    }

    /*
    This recursive function adds the set of variables in a 
    given expression to the set, r, given as an argument. 
    Note: The getVars and getVarsHelper functions together
    exhibits a fundamental design pattern called "mutual 
    recursion". The main function calls the helper function
    with a partial result to be completed, then the helper
    function calls the main function recursively to solve
    sub-parts of the problem it was called to handle. It
    then combines the results of these subcalls to complete
    the work it was asked to do.  
    */
    function method getVarsHelper(e: pExp, r: set<pVar>): set<pVar>
    {
        match e
        {
            case pFalse => r
            case pTrue => r
            case pVarExp (v: pVar) => r + { v }
            case pNot (e: pExp) => r + getVars(e)
            case pAnd (e1: pExp, e2: pExp) =>
                r + getVars(e1) + getVars(e2)
            case pOr (e1: pExp, e2: pExp) =>
                r + getVars(e1) + getVars(e2)
            case pImpl (e1: pExp, e2: pExp) =>
                r + getVars(e1) + getVars(e2)
        }
    }

    /*
    This method gets the *set* of variables in a given
    expression and returns it as an ordered sequence. The
    order in which the elements will appear is undefined.
    That is, they will be in some order, but one must not
    count on there being any particular order. 
    */

        In programming languages, such a mapping from
    variables to values is called an environment. 
    Another term for the same idea is "state." The
    state of a program is the value of each of its
    variables at a given point in program execution.

    ======

       /*
    Given a sequence, vs, of Boolean variables, return a 
    sequence of all (2^|vs|) possible interpretations, i.e.,
    mappings from these variables to Boolean values. Watch
    out: for large numbers of variables the result be very
    large.
    */
 }

    /*************** 

    function method init_interp'(vs: seq<pVar>): pInterpretation
    {
        init_interp'_helper(vs, map[])
    }



    function method init_interp'_helper(vs: seq<pVar>, i: pInterpretation): (p: pInterpretation)
        // ensures forall v :: v in vs ==> v in p
    {
        if | vs | == 0 
        then i
        else init_interp'_helper(vs[1..], i[vs[0] := false])
    }


    function method next_interp'(vs: seq<pVar>, a: seq<pInterpretation>): pInterpretation
        requires | a | >= 1;
    {
        increment_interp'(vs, a[0], | vs |)
    }


    function method  increment_interp' (vs: seq<pVar>, i: pInterpretation, idx: nat): pInterpretation
        requires 0 <= idx < |vs|
        requires forall v :: v in vs ==> v in i
    {
       if idx == 0 then i 
       else if vs[idx] !in i then i
       else if i[vs[idx]] == false then i[ vs[idx] := true ]
       else increment_interp'(vs, i[ vs[idx] := false ], idx - 1)
    }

    function method all_interps'(vs: seq<pVar>): (result: seq<pInterpretation>)
    {
        all_interps'_help(vs, pow2(|vs|), [ init_interp'(vs) ])
    }

    function method all_interps'_help(vs: seq<pVar>, fl: nat, a: seq<pInterpretation>):
        (result: seq<pInterpretation>)
            requires | a |  >= 1;
    {
        if fl == 0 
        then a  
        else all_interps'_help(vs, fl - 1, [ next_interp'(vs, a)] + a )     
    }
}

=======

   /*
    We note that a map might not be "total": that
    is, it might not contain an entry for every 
    variable (bVar) we have declared to exist. If
    we try to look up a value that is not defined
    in the map, we'll get an error. For example, if
    i is an interpetation (a map<string, bool>) and
    we try to look up the bool value for a string
    that isn't defined in the map, e.g., "FooBar",
    it won't work.

    Our solution for now will be to define a function
    that takes an interpretation and a string to look
    up and that returns the value for the string in the
    map if it's defined in the map, and that returns
    the value "false" as a default if the string is 
    not in the map. 
    
    This isn't a great design, in that a return of 
    "false" could mean one of two things: either the 
    value of the variable really is false, or it's 
    just not assigned a value in the interpretation. 
    For now, our design is good enough to illustate 
    our main points.
    */

    

